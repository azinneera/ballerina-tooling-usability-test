import ballerina/grpc;
import ballerina/http;
import ballerina/time;
import onlineBoutique/ProductCatalogService;

listener grpc:Listener ep = new (9091);
//Cart service is mocked using mocky.io
http:Client cartServiceEp = new ("https://run.mocky.io/v3/");
ProductCatalogService:ProductCatalogServiceBlockingClient catalogServiceEp = new ("http://localhost:9093");

service CheckoutService on ep {
    resource function PlaceOrder(grpc:Caller caller, PlaceOrderRequest value) {
        //Constant shopping fee
        ProductCatalogService:Money shipping_fee = {units: 100};
        OrderItem[] items = getOrderItems(value.user_id);
        OrderResult result = {
            order_id: generateOrderId(value.user_id),
            shipping_tracking_id: "shipping/0001",
            shipping_cost: shipping_fee,
            shipping_address: value.address,
            items: items
        };
        PlaceOrderResponse order_response = {order: result};
        error? send = caller->send(order_response);
    }
}

function generateOrderId(string userId) returns string {
    time:Time time = time:currentTime();
    int currentTimeMills = time.time;
    string orderId = "order/" + userId + "/" + currentTimeMills.toJsonString();
    return orderId;
}

function calculateCost(string productId) returns ProductCatalogService:Money? {
    ProductCatalogService:ListProductsResponse prodListResponse = {};
    Empty req = {};
    [ProductCatalogService:ListProductsResponse, grpc:Headers]|error response = catalogServiceEp->ListProducts(req);
    if (response is [ProductCatalogService:ListProductsResponse, grpc:Headers]) {
        [prodListResponse, _] = response;
    }
    foreach var product in prodListResponse.products {
        if (product.id == productId) {
            return product.priceUsd;
        }
    }
    return ();
}

function getOrderItems(string userId) returns OrderItem[] {
    OrderItem item;
    OrderItem[] items = [];
    Cart cart = getCart(userId);
    foreach CartItem cartItem in cart.items {
        item = {item: cartItem, cost: calculateCost(cartItem.product_id)};
        items.push(item);
    }
    return items;
}


function getCart(string userId) returns @tainted Cart {
    Cart cart = {};
    // TODO: Enable when CartService is available
    //GetCartRequest cartReq = {user_id: userId};
    //[Cart, grpc:Headers]|grpc:Error serviceResponse = cartServiceEp->GetCart(cartReq);
    //if (serviceResponse is [Cart, grpc:Headers]) {
    //    [cart, _] = serviceResponse;
    //}
    http:Response|error response = cartServiceEp->get("830a6cb1-3404-40fe-9bfb-43d9c2e2a2ec");
    if (response is http:Response) {
        json cartDetails = <json>response.getJsonPayload();
        Cart|error cloneWithTypeResult = cartDetails.cloneWithType(Cart);
        if (cloneWithTypeResult is Cart) {
            cart = cloneWithTypeResult;
        }
    }
    return cart;
}

public type Empty record {|

|};

public type Address record {|
    string street_address = "";
    string city = "";
    string state = "";
    string country = "";
    int zip_code = 0;

|};

public type PlaceOrderRequest record {|
    string user_id = "";
    string user_currency = "";
    Address? address = ();
    string email = "";
    CreditCardInfo? credit_card = ();

|};

public type OrderItem record {|
    CartItem? item = ();
    ProductCatalogService:Money? cost = ();

|};

public type OrderResult record {|
    string order_id = "";
    string shipping_tracking_id = "";
    ProductCatalogService:Money? shipping_cost = ();
    Address? shipping_address = ();
    OrderItem[] items = [];

|};

public type CartItem record {|
    string product_id = "";
    int quantity = 0;

|};

public type PlaceOrderResponse record {|
    OrderResult? order = ();

|};

public type CreditCardInfo record {|
    string credit_card_number = "";
    int credit_card_cvv = 0;
    int credit_card_expiration_year = 0;
    int credit_card_expiration_month = 0;
|};

public type Cart record {|
    string user_id = "";
    CartItem[] items = [];

|};

public type GetCartRequest record {|
    string user_id = "";

|};

public type Product record {|
    string id = "";
    string name = "";
    string description = "";
    string picture = "";
    ProductCatalogService:Money? priceUsd = ();
    string[] categories = [];
|};

const string
function getDescriptorMap() returns map<string> {
    return {
        "demo.proto

    };
}

