import ballerina/grpc;
import ballerina/io;
import ballerina/ 'log;

listener grpc:Listener ep = new (9090);

service ProductCatalogService on ep {

    resource function ListProducts(grpc:Caller caller, Empty value) {
        string filePath = "src/ProductCatalogService/resources/products.json";
        ListProductsResponse response = {};
        json|error productResp = read(filePath);
        if (productResp is json) {
            json[]|error productsArr = <json[]>(productResp.products);
            if (productsArr is json[]) {
                foreach json product in productsArr {
                    Product|error prod = product.cloneWithType(Product);
                    if (prod is Product) {
                        response.products.push(prod);
                    }
                }
            }
        }
        error? send = caller->send(response);
    }

    resource function GetProduct(grpc:Caller caller, GetProductRequest value) {
    // Implementation goes here.

    // You should return a Product
    }
    resource function SearchProducts(grpc:Caller caller, SearchProductsRequest value) {
    // Implementation goes here.

    // You should return a SearchProductsResponse
    }
}

public type Money record {|
    string currencyCode = "";
    int units = 0;
    int nanos = 0;

|};

public type Empty record {|

|};

public type SearchProductsResponse record {|
    Product[] results = [];

|};

public type SearchProductsRequest record {|
    string query = "";

|};

public type GetProductRequest record {|
    string id = "";

|};

public type ListProductsResponse record {|
    Product[] products = [];

|};

public type Product record {|
    string id = "";
    string name = "";
    string description = "";
    string picture = "";
    Money? priceUsd = ();
    string[] categories = [];
|};


const string
function getDescriptorMap() returns map<string> {
    return {
        "demo.proto

    };
}

function closeRc(io:ReadableCharacterChannel rc) {
    var result = rc.close();
    if (result is error) {
        log:printError("Error occurred while closing character stream",
            err = result);
    }
}

function closeWc(io:WritableCharacterChannel wc) {
    var result = wc.close();
    if (result is error) {
        log:printError("Error occurred while closing character stream",
            err = result);
    }
}

function write(json content, string path) returns @tainted error? {

    io:WritableByteChannel wbc = check io:openWritableFile(path);

    io:WritableCharacterChannel wch = new (wbc, "UTF8");
    var result = wch.writeJson(content);
    closeWc(wch);
    return result;
}

function read(string path) returns @tainted json|error {

    io:ReadableByteChannel rbc = check io:openReadableFile(path);

    io:ReadableCharacterChannel rch = new (rbc, "UTF8");
    var result = rch.readJson();
    closeRc(rch);
    return result;
}
